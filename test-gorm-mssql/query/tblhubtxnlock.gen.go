// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"testgorm/models"
)

func newHubTxnLock(db *gorm.DB, opts ...gen.DOOption) hubTxnLock {
	_hubTxnLock := hubTxnLock{}

	_hubTxnLock.hubTxnLockDo.UseDB(db, opts...)
	_hubTxnLock.hubTxnLockDo.UseModel(&models.HubTxnLock{})

	tableName := _hubTxnLock.hubTxnLockDo.TableName()
	_hubTxnLock.ALL = field.NewAsterisk(tableName)
	_hubTxnLock.ID = field.NewField(tableName, "Id")
	_hubTxnLock.TerminalHubID = field.NewString(tableName, "TerminalHubID")
	_hubTxnLock.HubTID = field.NewString(tableName, "HubTID")
	_hubTxnLock.TerminalID = field.NewString(tableName, "TerminalID")
	_hubTxnLock.CreatedDate = field.NewTime(tableName, "CreatedDate")
	_hubTxnLock.ExpiredTime = field.NewTime(tableName, "ExpiredTime")

	_hubTxnLock.fillFieldMap()

	return _hubTxnLock
}

type hubTxnLock struct {
	hubTxnLockDo

	ALL           field.Asterisk
	ID            field.Field
	TerminalHubID field.String
	HubTID        field.String
	TerminalID    field.String
	CreatedDate   field.Time
	ExpiredTime   field.Time

	fieldMap map[string]field.Expr
}

func (h hubTxnLock) Table(newTableName string) *hubTxnLock {
	h.hubTxnLockDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hubTxnLock) As(alias string) *hubTxnLock {
	h.hubTxnLockDo.DO = *(h.hubTxnLockDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hubTxnLock) updateTableName(table string) *hubTxnLock {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewField(table, "Id")
	h.TerminalHubID = field.NewString(table, "TerminalHubID")
	h.HubTID = field.NewString(table, "HubTID")
	h.TerminalID = field.NewString(table, "TerminalID")
	h.CreatedDate = field.NewTime(table, "CreatedDate")
	h.ExpiredTime = field.NewTime(table, "ExpiredTime")

	h.fillFieldMap()

	return h
}

func (h *hubTxnLock) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hubTxnLock) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 6)
	h.fieldMap["Id"] = h.ID
	h.fieldMap["TerminalHubID"] = h.TerminalHubID
	h.fieldMap["HubTID"] = h.HubTID
	h.fieldMap["TerminalID"] = h.TerminalID
	h.fieldMap["CreatedDate"] = h.CreatedDate
	h.fieldMap["ExpiredTime"] = h.ExpiredTime
}

func (h hubTxnLock) clone(db *gorm.DB) hubTxnLock {
	h.hubTxnLockDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hubTxnLock) replaceDB(db *gorm.DB) hubTxnLock {
	h.hubTxnLockDo.ReplaceDB(db)
	return h
}

type hubTxnLockDo struct{ gen.DO }

type IHubTxnLockDo interface {
	gen.SubQuery
	Debug() IHubTxnLockDo
	WithContext(ctx context.Context) IHubTxnLockDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHubTxnLockDo
	WriteDB() IHubTxnLockDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHubTxnLockDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHubTxnLockDo
	Not(conds ...gen.Condition) IHubTxnLockDo
	Or(conds ...gen.Condition) IHubTxnLockDo
	Select(conds ...field.Expr) IHubTxnLockDo
	Where(conds ...gen.Condition) IHubTxnLockDo
	Order(conds ...field.Expr) IHubTxnLockDo
	Distinct(cols ...field.Expr) IHubTxnLockDo
	Omit(cols ...field.Expr) IHubTxnLockDo
	Join(table schema.Tabler, on ...field.Expr) IHubTxnLockDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHubTxnLockDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHubTxnLockDo
	Group(cols ...field.Expr) IHubTxnLockDo
	Having(conds ...gen.Condition) IHubTxnLockDo
	Limit(limit int) IHubTxnLockDo
	Offset(offset int) IHubTxnLockDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHubTxnLockDo
	Unscoped() IHubTxnLockDo
	Create(values ...*models.HubTxnLock) error
	CreateInBatches(values []*models.HubTxnLock, batchSize int) error
	Save(values ...*models.HubTxnLock) error
	First() (*models.HubTxnLock, error)
	Take() (*models.HubTxnLock, error)
	Last() (*models.HubTxnLock, error)
	Find() ([]*models.HubTxnLock, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.HubTxnLock, err error)
	FindInBatches(result *[]*models.HubTxnLock, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.HubTxnLock) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHubTxnLockDo
	Assign(attrs ...field.AssignExpr) IHubTxnLockDo
	Joins(fields ...field.RelationField) IHubTxnLockDo
	Preload(fields ...field.RelationField) IHubTxnLockDo
	FirstOrInit() (*models.HubTxnLock, error)
	FirstOrCreate() (*models.HubTxnLock, error)
	FindByPage(offset int, limit int) (result []*models.HubTxnLock, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHubTxnLockDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []models.HubTxnLock, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (h hubTxnLockDo) FilterWithNameAndRole(name string, role string) (result []models.HubTxnLock, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM tblHubTxnLock WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (h hubTxnLockDo) Debug() IHubTxnLockDo {
	return h.withDO(h.DO.Debug())
}

func (h hubTxnLockDo) WithContext(ctx context.Context) IHubTxnLockDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hubTxnLockDo) ReadDB() IHubTxnLockDo {
	return h.Clauses(dbresolver.Read)
}

func (h hubTxnLockDo) WriteDB() IHubTxnLockDo {
	return h.Clauses(dbresolver.Write)
}

func (h hubTxnLockDo) Session(config *gorm.Session) IHubTxnLockDo {
	return h.withDO(h.DO.Session(config))
}

func (h hubTxnLockDo) Clauses(conds ...clause.Expression) IHubTxnLockDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hubTxnLockDo) Returning(value interface{}, columns ...string) IHubTxnLockDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hubTxnLockDo) Not(conds ...gen.Condition) IHubTxnLockDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hubTxnLockDo) Or(conds ...gen.Condition) IHubTxnLockDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hubTxnLockDo) Select(conds ...field.Expr) IHubTxnLockDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hubTxnLockDo) Where(conds ...gen.Condition) IHubTxnLockDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hubTxnLockDo) Order(conds ...field.Expr) IHubTxnLockDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hubTxnLockDo) Distinct(cols ...field.Expr) IHubTxnLockDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hubTxnLockDo) Omit(cols ...field.Expr) IHubTxnLockDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hubTxnLockDo) Join(table schema.Tabler, on ...field.Expr) IHubTxnLockDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hubTxnLockDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHubTxnLockDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hubTxnLockDo) RightJoin(table schema.Tabler, on ...field.Expr) IHubTxnLockDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hubTxnLockDo) Group(cols ...field.Expr) IHubTxnLockDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hubTxnLockDo) Having(conds ...gen.Condition) IHubTxnLockDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hubTxnLockDo) Limit(limit int) IHubTxnLockDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hubTxnLockDo) Offset(offset int) IHubTxnLockDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hubTxnLockDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHubTxnLockDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hubTxnLockDo) Unscoped() IHubTxnLockDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hubTxnLockDo) Create(values ...*models.HubTxnLock) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hubTxnLockDo) CreateInBatches(values []*models.HubTxnLock, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hubTxnLockDo) Save(values ...*models.HubTxnLock) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hubTxnLockDo) First() (*models.HubTxnLock, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.HubTxnLock), nil
	}
}

func (h hubTxnLockDo) Take() (*models.HubTxnLock, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.HubTxnLock), nil
	}
}

func (h hubTxnLockDo) Last() (*models.HubTxnLock, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.HubTxnLock), nil
	}
}

func (h hubTxnLockDo) Find() ([]*models.HubTxnLock, error) {
	result, err := h.DO.Find()
	return result.([]*models.HubTxnLock), err
}

func (h hubTxnLockDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.HubTxnLock, err error) {
	buf := make([]*models.HubTxnLock, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hubTxnLockDo) FindInBatches(result *[]*models.HubTxnLock, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hubTxnLockDo) Attrs(attrs ...field.AssignExpr) IHubTxnLockDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hubTxnLockDo) Assign(attrs ...field.AssignExpr) IHubTxnLockDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hubTxnLockDo) Joins(fields ...field.RelationField) IHubTxnLockDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hubTxnLockDo) Preload(fields ...field.RelationField) IHubTxnLockDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hubTxnLockDo) FirstOrInit() (*models.HubTxnLock, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.HubTxnLock), nil
	}
}

func (h hubTxnLockDo) FirstOrCreate() (*models.HubTxnLock, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.HubTxnLock), nil
	}
}

func (h hubTxnLockDo) FindByPage(offset int, limit int) (result []*models.HubTxnLock, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hubTxnLockDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hubTxnLockDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hubTxnLockDo) Delete(models ...*models.HubTxnLock) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hubTxnLockDo) withDO(do gen.Dao) *hubTxnLockDo {
	h.DO = *do.(*gen.DO)
	return h
}
